{
 "cells": [
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-17T13:37:34.835497Z",
     "start_time": "2025-10-17T13:37:34.679482Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# ==========================================================\n",
    "# Mapa interactivo de faenas mineras de Per√∫ (Aplicaci√≥n Dash)\n",
    "# ==========================================================\n",
    "# Autor: Kataix & GPT-5 (Versi√≥n final con Dash por Gemini)\n",
    "# Librer√≠as necesarias:\n",
    "# pip install pandas plotly geopy openpyxl tqdm dash\n",
    "\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "from geopy.geocoders import Nominatim\n",
    "from geopy.extra.rate_limiter import RateLimiter\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "import dash\n",
    "from dash import dcc, html\n",
    "from dash.dependencies import Input, Output\n",
    "import webbrowser\n",
    "\n",
    "# --- PASO 1: Cargar y preparar los datos (igual que antes) ---\n",
    "\n",
    "def cargar_y_geocodificar_datos():\n",
    "    \"\"\"Funci√≥n para encapsular la carga y preparaci√≥n de datos.\"\"\"\n",
    "    try:\n",
    "        df = pd.read_excel(\"minas_peru_geocodificado.xlsx\")\n",
    "        print(\"‚Üí Se carg√≥ el archivo con coordenadas preexistentes.\")\n",
    "    except FileNotFoundError:\n",
    "        print(\"‚Üí No se encontr√≥ archivo geocodificado. Procediendo a obtener coordenadas...\")\n",
    "        try:\n",
    "            ruta_excel = \"minas_peru_completo_reordenado.xlsx\"\n",
    "            df = pd.read_excel(ruta_excel)\n",
    "        except FileNotFoundError:\n",
    "            print(f\"Error: No se encontr√≥ el archivo base en la ruta '{ruta_excel}'.\")\n",
    "            return None\n",
    "\n",
    "        df[\"Ubicaci√≥n\"] = df[\"Nombre\"].astype(str) + \", \" + df[\"Regi√≥n\"].astype(str) + \", Per√∫\"\n",
    "        geolocator = Nominatim(user_agent=\"mapa_minas_peru_dash\")\n",
    "        geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1)\n",
    "\n",
    "        latitudes = []\n",
    "        longitudes = []\n",
    "        for loc in tqdm(df[\"Ubicaci√≥n\"], desc=\"Obteniendo coordenadas...\"):\n",
    "            try:\n",
    "                location = geocode(loc)\n",
    "                latitudes.append(location.latitude if location else np.nan)\n",
    "                longitudes.append(location.longitude if location else np.nan)\n",
    "            except Exception:\n",
    "                latitudes.append(np.nan)\n",
    "                longitudes.append(np.nan)\n",
    "\n",
    "        df[\"Latitud\"] = latitudes\n",
    "        df[\"Longitud\"] = longitudes\n",
    "        df.to_excel(\"minas_peru_geocodificado.xlsx\", index=False)\n",
    "        print(\"‚Üí Coordenadas guardadas en 'minas_peru_geocodificado.xlsx'.\")\n",
    "\n",
    "    df.dropna(subset=['Latitud', 'Longitud'], inplace=True)\n",
    "\n",
    "    # Aseguramos que las columnas existan y sean de tipo string\n",
    "    cols_necesarias = [\"Nombre\", \"Empresa\", \"Regi√≥n\", \"Mineral principal\", \"Tipo de yacimiento\", \"Link\"]\n",
    "    for col in cols_necesarias:\n",
    "        if col in df.columns:\n",
    "            df[col] = df[col].astype(str).replace('nan', 'No disponible')\n",
    "        else:\n",
    "            df[col] = \"No disponible\"\n",
    "\n",
    "    return df\n",
    "\n",
    "df_minas = cargar_y_geocodificar_datos()\n",
    "\n",
    "# Creamos el mapa base que se mostrar√° en la aplicaci√≥n\n",
    "fig = px.scatter_geo(\n",
    "    df_minas,\n",
    "    lat=\"Latitud\",\n",
    "    lon=\"Longitud\",\n",
    "    hover_name=\"Nombre\",\n",
    "    color=\"Tipo de yacimiento\",\n",
    "    custom_data=[\"Nombre\"], # Pasamos el nombre para identificar el punto clickeado\n",
    "    title=\"ü™® Mapa interactivo de faenas mineras en Per√∫ (Haz clic en un punto)\",\n",
    "    projection=\"natural earth\"\n",
    ")\n",
    "fig.update_layout(\n",
    "    geo=dict(\n",
    "        scope='south america', center=dict(lat=-9.19, lon=-75.01), projection_scale=6,\n",
    "        showland=True, landcolor=\"lightgray\", showcountries=True, countrycolor=\"white\"\n",
    "    ),\n",
    "    title_font=dict(size=20),\n",
    "    margin={\"r\":0,\"t\":40,\"l\":0,\"b\":0}\n",
    ")\n",
    "fig.update_traces(marker=dict(size=8, line=dict(width=1, color=\"DarkSlateGrey\")))\n",
    "\n",
    "\n",
    "# --- PASO 2: Construir la aplicaci√≥n Dash ---\n",
    "\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div(style={'display': 'flex', 'fontFamily': 'Arial'}, children=[\n",
    "    # Columna para el mapa\n",
    "    html.Div(className=\"map-container\", style={'width': '70%', 'display': 'inline-block', 'verticalAlign': 'top'}, children=[\n",
    "        dcc.Graph(id='mapa-minas', figure=fig, style={'height': '100vh'})\n",
    "    ]),\n",
    "\n",
    "    # Columna para la informaci√≥n persistente\n",
    "    html.Div(className=\"info-container\", id='info-mina-div', style={'width': '30%', 'padding': '20px', 'display': 'inline-block'}, children=[\n",
    "        html.H3(\"Informaci√≥n de la Faena\"),\n",
    "        html.Hr(),\n",
    "        html.P(\"Haz clic sobre cualquier punto en el mapa para ver los detalles aqu√≠.\")\n",
    "    ])\n",
    "])\n",
    "\n",
    "# --- PASO 3: Definir la interactividad (la \"magia\" de Dash) ---\n",
    "\n",
    "@app.callback(\n",
    "    Output('info-mina-div', 'children'), # El output es el contenido del panel de informaci√≥n\n",
    "    Input('mapa-minas', 'clickData')     # El input es el evento de clic en el mapa\n",
    ")\n",
    "def display_click_data(clickData):\n",
    "    # Si no se ha hecho clic en ning√∫n punto todav√≠a\n",
    "    if clickData is None:\n",
    "        return [\n",
    "            html.H3(\"Informaci√≥n de la Faena\"),\n",
    "            html.Hr(),\n",
    "            html.P(\"Haz clic sobre cualquier punto en el mapa para ver los detalles aqu√≠.\")\n",
    "        ]\n",
    "\n",
    "    # Si se hizo clic, extraemos la informaci√≥n\n",
    "    # Obtenemos el nombre de la mina desde `custom_data`\n",
    "    nombre_mina = clickData['points'][0]['customdata'][0]\n",
    "\n",
    "    # Buscamos la fila completa de esa mina en nuestro DataFrame\n",
    "    mina_info = df_minas[df_minas['Nombre'] == nombre_mina].iloc[0]\n",
    "\n",
    "    # Creamos el componente de link\n",
    "    link = mina_info['Link']\n",
    "    if link != \"No disponible\" and link.startswith('http'):\n",
    "        link_componente = dcc.Link(\"Abrir enlace\", href=link, target=\"_blank\")\n",
    "    else:\n",
    "        link_componente = html.Span(\"No disponible\")\n",
    "\n",
    "    # Devolvemos el panel de informaci√≥n formateado\n",
    "    return [\n",
    "        html.H3(f\"üìç {mina_info['Nombre']}\"),\n",
    "        html.Hr(),\n",
    "        html.B(\"Empresa: \"), html.Span(mina_info['Empresa']),\n",
    "        html.Br(), html.Br(),\n",
    "        html.B(\"Regi√≥n: \"), html.Span(mina_info['Regi√≥n']),\n",
    "        html.Br(), html.Br(),\n",
    "        html.B(\"Mineral Principal: \"), html.Span(mina_info['Mineral principal']),\n",
    "        html.Br(), html.Br(),\n",
    "        html.B(\"Tipo de Yacimiento: \"), html.Span(mina_info['Tipo de yacimiento']),\n",
    "        html.Br(), html.Br(),\n",
    "        html.B(\"Link: \"), link_componente\n",
    "    ]\n",
    "\n",
    "\n",
    "# --- PASO 4: Ejecutar la aplicaci√≥n ---\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    # Abrimos el navegador autom√°ticamente\n",
    "    webbrowser.open(\"http://127.0.0.1:8050/\")\n",
    "    app.run(debug=False)"
   ],
   "id": "dc00c9001c9320d1",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚Üí Se carg√≥ el archivo con coordenadas preexistentes.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1b8d4c0bad0>"
      ],
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data",
     "jetTransient": {
     }
    }
   ],
   "execution_count": 4
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
